\frametitle{7.1.5~可变参函数模板\normalsize {~---~转发参数包}}

在C++11新标准下可以利用~\alert{\texttt{std::forward}}~函数实现：

\vspace{-4mm}

\begin{columns}[t]

\column{0.65\textwidth}
\begin{blueblock}{\texttt{std::forward}转发左值描述性声明}
\vspace{-2mm}\begin{lstlisting}[basicstyle=\scriptsize\ttfamily,moreemph={T}]
template<typename T>
T&& forward( typename std::remove_reference<T>::type& t );
\end{lstlisting}\vspace{-2mm}
\end{blueblock}
\begin{blueblock}<2->{\texttt{forwardValue}函数定义二}
\vspace{-2mm}\begin{lstlisting}[moreemph={T}]
template<typename T>
void forwardValue(T &&val) {
    rvalue(std::forward<T>(val));
}
\end{lstlisting}\vspace{-2mm}
\end{blueblock}
\begin{blueblock}<2->{\texttt{forwardValue}函数调用二}
\vspace{-2mm}\begin{lstlisting}[moreemph={T}]
forwardValue(42);       //正确
int a = 42;
forwardValue(a);        //正确
\end{lstlisting}\vspace{-2mm}
\end{blueblock}

\column{0.3\textwidth}
\begin{yellowblock}<3->{说明}
$\bullet$ 当传入\texttt{forwardValue}的实参为右值，\texttt{T}被推断为非引用类型，forward<T>返回右值引用\\
$\bullet$ 当传入\texttt{forwardValue}的实参为左值，\texttt{T}被推断为左值引用类型，此时\texttt{forward<T>}将返回左值引用
\end{yellowblock}
\vspace{-2mm}
\begin{redblock}<4->{注意}
在C++11新标准下，\\
\texttt{\&\& \&和\& \&\&}折叠为 \texttt{\&}
\end{redblock}

\end{columns}

